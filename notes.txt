#### Motion names

    name: "close_gripper"
    name: "close_gripper_half"
    name: "do_weights"
    name: "head_tour"
    name: "home"
    name: "offer_gripper"
    name: "open_gripper"
    name: "pick_final_pose"
    name: "pick_from_floor"
    name: "pregrasp"
    name: "pregrasp_weight"
    name: "reach_floor"
    name: "reach_max"
    name: "shake_hands"
    name: "show_manip_ws"
    name: "unfold_arm"
    name: "wave"

#### BehaviourTree BOILER PLATE

# import py_trees as pt, py_trees_ros as ptr

# class BehaviourTree(ptr.trees.BehaviourTree):

# 	def __init__(self):

        # rospy.loginfo("Initialising behaviour tree")

# 		# go to door until at door
# 		b0 = pt.composites.Selector(
# 			name="Go to door fallback",
# 			children=[Counter(30, "At door?"), Go("Go to door!", 1, 0)]
# 		)

# 		# tuck the arm
# 		b1 = TuckArm()

# 		# go to table
# 		b2 = pt.composites.Selector(
# 			name="Go to table fallback",
# 			children=[Counter(5, "At table?"), Go("Go to table!", 0, -1)]
# 		)

# 		# move to chair
# 		b3 = pt.composites.Selector(GetModelState
# 			name="Go to chair fallback",GetModelState
# 			children=[Counter(13, "At chair?"), Go("Go to chair!", 1, 0)]GetModelState
# 		)

# 		# lower head
# 		b4 = LowerHead()

# 		# become the tree
# 		tree = pt.composites.Sequence(name="Main sequence", children=[b0, b1, b2, b3, b4])
# 		super(BehaviourTree, self).__init__(tree)

# 		# execute the behaviour tree
# 		self.setup(timeout=10000)
# 		while not rospy.is_shutdown(): self.tick_tock(1)


# class Counter(pt.behaviour.Behaviour):

# 	def __init__(self, n, name):

# 		# counter
# 		self.i = 0
# 		self.n = n

# 		# become a behaviour
# 		super(Counter, self).__init__(name)

# 	def update(self):

# 		# count until n
# 		while self.i <= self.n:

# 			# increment count
# 			self.i += 1

# 			# return failure :(
# 			return pt.common.Status.FAILURE

# 		# succeed after counter done :)
# 		return pt.common.Status.SUCCESS


# class Go(pt.behaviour.Behaviour):

# 	def __init__(self, name, linear, angular):

# 		# action space
# 		self.cmd_vel_top = rospy.get_param(rospy.get_name() + '/cmd_vel_topic')
# 		self.cmd_vel_pub = rospy.Publisher(self.cmd_vel_top, Twist, queue_size=10)

# 		# command
# 		self.move_msg = Twist()
# 		self.move_msg.linear.x = linear
# 		self.move_msg.angular.z = angular

# 		# become a behaviour
# 		super(Go, self).__init__(name)

# 	def update(self):

# 		# send the message
# 		rate = rospy.Rate(10)
# 		self.cmd_vel_pub.publish(self.move_msg)
# 		rate.sleep()

# 		# tell the tree that you're running
# 		return pt.common.Status.RUNNING


# class TuckArm(pt.behaviour.Behaviour):

# 	def __init__(self):

# 		# Set up action client
# 		self.play_motion_ac = SimpleActionClient("/play_motion", PlayMotionAction)

# 		# personal goal setting
# 		self.goal = PlayMotionGoal()
# 		self.goal.motion_name = 'home'
# 		self.goal.skip_planning = True

# 		# execution checker
# 		self.sent_goal = False
# 		self.finished = False

# 		# become a behaviour
# 		super(TuckArm, self).__init__("Tuck arm!")

# 	def update(self):

# 		# already tucked the arm
# 		if self.finished:
# 			return pt.common.Status.SUCCESS

# 		# command to tuck arm if haven't already
# 		elif not self.sent_goal:

# 			# send the goal
# 			self.play_motion_ac.send_goal(self.goal)
# 			self.sent_goal = True

# 			# tell the tree you're running
# 			return pt.common.Status.RUNNING

# 		# if I was succesful! :)))))))))
# 		elif self.play_motion_ac.get_result():

# 			# than I'm finished!
# 			self.finished = True
# 			return pt.common.Status.SUCCESS

# 		# if I'm still trying :|
# 		else:
# 			return pt.common.Status.RUNNING


# class LowerHead(pt.behaviour.Behaviour):

# 	def __init__(self):

# 		# server
# 		move_head_srv_name = rospy.get_param(rospy.get_name() + '/move_head_srv')
# 		self.move_head_srv = rospy.ServiceProxy(move_head_srv_name, MoveHead)
# 		rospy.wait_for_service(move_head_srv_name, timeout=30)

# 		# execution checker
# 		self.tried = False
# 		self.tucked = False

# 		# become a behaviour
# 		super(LowerHead, self).__init__("Lower head!")

# 	def update(self):

# 		# try to tuck head if haven't already
# 		if not self.tried:

# 			# command
# 			self.move_head_req = self.move_head_srv("down")
# 			self.tried = True

# 			# tell the tree you're running
# 			return pt.common.Status.RUNNING

# 		# react to outcome
# 		else: return pt.common.Status.SUCCESS if self.move_head_req.success else pt.common.Status.FAILURE

"""

##### BOILER PLATE PROVIDED

# State 0: Move the robot "manually" to door
if self.state == 0:
    move_msg = Twist()
    move_msg.linear.x = 1

    rate = rospy.Rate(10)
    converged = False
    cnt = 0
    # rospy.loginfo("%s: Moving towards door", self.node_name)
    while not rospy.is_shutdown() and cnt < 25:
        self.cmd_vel_pub.publish(move_msg)
        rate.sleep()
        cnt = cnt + 1

    self.state = 1
    rospy.sleep(1)

# State 1:  Tuck arm 
if self.state == 1:
    rospy.loginfo("%s: Tucking the arm...", self.node_name)
    goal = PlayMotionGoal()
    goal.motion_name = 'home'
    goal.skip_planning = True
    self.play_motion_ac.send_goal(goal)
    success_tucking = self.play_motion_ac.wait_for_result(rospy.Duration(100.0))

    if success_tucking:
        rospy.loginfo("%s: Arm tucked.", self.node_name)
        self.state = 2
    else:
        self.play_motion_ac.cancel_goal()
        rospy.logerr("%s: play_motion failed to tuck arm, reset simulation", self.node_name)
        self.state = 5

    rospy.sleep(1)

# State 2:  Move the robot "manually" to chair
if self.state == 2:
    move_msg = Twist()
    move_msg.angular.z = -1

    rate = rospy.Rate(10)
    converged = False
    cnt = 0
    rospy.loginfo("%s: Moving towards table", self.node_name)
    while not rospy.is_shutdown() and cnt < 5:
        self.cmd_vel_pub.publish(move_msg)
        rate.sleep()
        cnt = cnt + 1

    move_msg.linear.x = 1
    move_msg.angular.z = 0
    cnt = 0
    while not rospy.is_shutdown() and cnt < 15:
        self.cmd_vel            if self.state == 0:
    move_msg = Twist()
    move_msg.linear.x = 1

    rate = rospy.Rate(10)
    converged = False
    cnt = 0
    rospy.loginfo("%s: Moving towards door", self.node_name)
    while not rospy.is_shutdown() and cnt < 25:
        self.cmd_vel_pub.publish(move_msg)
        rate.sleep()
        cnt = cnt + 1

    self.state = 1
    rospy.sleep(1)_pub.publish(move_msg)
        rate.sleep()
        cnt = cnt + 1

    self.state = 3
    rospy.sleep(1)

# State 3:  Lower robot head service
if self.state == 3:
    try:
        rospy.loginfo("%s: Lowering robot head", self.node_name)
        move_head_srv = rospy.ServiceProxy(self.move_head_srv_name, MoveHead)
        move_head_req = move_head_srv("down")
        
        if move_head_req.success == True:
            self.state = 4
            rospy.loginfo("%s: Move head down succeded!", self.node_name)
        else:
            rospy.loginfo("%s: Move head down failed!", self.node_name)
            self.state = 5
gazebo_msgs
        rospy.sleep(3)gazebo_msgs
    gazebo_msgs
    except rospy.ServiceException, e:gazebo_msgs
        print "Service call to move_head server failed: %s"%e
"""

##### TRANSFORMS IF NEEDED LATER

rospy.loginfo()
try:
    transform = self.tf_buffer.lookup_transform(
        'map', 'odom', rospy.Time(0), rospy.Duration(4.0))
    transformed_pick = tf2_geometry_msgs.do_transform_pose(
        self.pick_pose_msg, transform)

    # transform = self.tf_buffer.lookup_transform('base_link',
    #                                             self.robot_position.child_frame_id,
    #                                             rospy.Time(0),
    #                                             rospy.Duration(4.0))
    # self.robot_position.pose = tf2_geometry_msgs.do_transform_pose(
    #     self.robot_position.pose, transform)

except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException), e:
    rospy.logerr("%s: transforms went wrong!", self.node_name)
    rospy.sleep(1)
    continue

rospy.loginfo('TRANSFORM COMPLETE')
rospy.loginfo(transformed_pick)
exit()

transform = self.tf_buffer.lookup_transform(
    'base_link', data.header.frame_id, rospy.Time(0), rospy.Duration(4.0))
transformed_pick = tf2_geometry_msgs.do_transform_pose(
    self.pick_pose_msg, transform)
# try:
# except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException), e:
#     rospy.logerr("%s: transforms went wrong!", self.node_name)
#     rospy.sleep(1)
#     continue

def get_rotation(msg):
    orientation_q = msg.pose.orientation
    orientation_list = [
        orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w
    ]
    (roll, pitch, yaw) = euler_from_quaternion(orientation_list)
    return yaw

msg = Twist()
err = np.Inf
while err > 0.1:
    kp = 0.5  # ?

    place_yaw = get_rotation(self.place_pose_msg)
    pick_yaw = get_rotation(self.pick_pose_msg)
    robot_yaw = get_rotation(self.robot_position.pose)
    msg.angular.z = kp * (place_yaw - robot_yaw)
    err = abs(place_yaw - robot_yaw)

    rospy.loginfo('\n')
    rospy.loginfo(err)
    rospy.loginfo(place_yaw)
    rospy.loginfo(pick_yaw)
    rospy.loginfo(robot_yaw)
    rospy.loginfo('\n')
    exit()

    self.cmd_vel_pub.publish(msg)
    rospy.sleep(1)

self.move_to_goal_ac.cancel_goal()

rospy.loginfo(data)
return